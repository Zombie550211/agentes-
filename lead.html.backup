
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Connecting</title>
  <!-- Chart.js -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <!-- Chart.js DataLabels Plugin -->
  <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.0.0"></script>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-modal/0.9.1/jquery.modal.min.js"></script>
  <script src="/js/logout-handler.js"></script>
  <script src="/js/user-info.js"></script>
  
  <script>
    // Función para obtener los leads del agente
    async function fetchLeadsAgente() {
      try {
        console.log('Obteniendo leads del agente...');
        const response = await fetch('/api/leads');
        if (!response.ok) throw new Error('Error al obtener los leads');
        const data = await response.json();
        return data;
      } catch (error) {
        console.error('Error en fetchLeadsAgente:', error);
        throw error;
      }
    }

    // Función para verificar el rol del usuario y mostrar/ocultar elementos según corresponda
    function checkUserRole() {
      try {
        // Ocultar el ítem de Team por defecto
        const teamMenuItem = document.getElementById('teamMenuItem');
        if (teamMenuItem) {
          teamMenuItem.style.display = 'none';
        }
        
        // Obtener el usuario del localStorage o sessionStorage
        const userData = JSON.parse(localStorage.getItem('user') || sessionStorage.getItem('user') || '{}');
        const userRole = userData.role ? userData.role.toLowerCase() : '';
        
        // Mostrar el ítem de Team para roles 'B:O' o 'admin'
        if (teamMenuItem) {
          if (userRole === 'b:o' || userRole === 'admin') {
            teamMenuItem.style.display = 'block';
          }
        }
      } catch (error) {
        console.error('Error al verificar el rol del usuario:', error);
      }
    }

    // Inicialización cuando el DOM esté listo
    document.addEventListener('DOMContentLoaded', function() {
      // Verificar rol y mostrar/ocultar elementos según corresponda
      checkUserRole();
    });
  </script>
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
  <!-- Sidebar CSS -->
  <link rel="stylesheet" href="css/sidebar.css">
  <!-- Script para cargar la información del usuario en el sidebar -->
  <style>
    /* Estilos para el contenedor de la gráfica */
    .graph-container {
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      padding: 20px;
      margin-bottom: 20px;
      width: 100%;
      height: 400px;
      position: relative;
    }
    
    .graph-canvas {
      width: 100% !important;
      height: 100% !important;
      min-height: 350px;
    }
    
    /* Estilos para notificaciones */
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 25px;
      border-radius: 8px;
      color: white;
      font-weight: 500;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      z-index: 1000;
      display: flex;
      align-items: center;
      transform: translateX(120%);
      transition: transform 0.3s ease-in-out;
      max-width: 350px;
    }

    .notification.show {
      transform: translateX(0);
    }

    .notification.success {
      background-color: #10b981;
      border-left: 4px solid #059669;
    }

    .notification.error {
      background-color: #ef4444;
      border-left: 4px solid #dc2626;
    }

    .notification i {
      margin-right: 10px;
      font-size: 20px;
    }

    :root {
      --azul-oscuro: #1e293b;
      --azul-acento: #22b3ec;
      --gris-bg: #f5f7fa;
      --gris-borde: #e3e8ee;
      --gris-titulo: #edf3fa;
      --azul-celda: #f1f5fa;
      --radius: 15px;
      --sombra: 0 4px 24px 0 rgba(30,41,59,0.09);
      --trans: 0.18s;
      --form-width: 420px;
    }
    * { box-sizing: border-box; }
    body {
      font-family: 'Segoe UI', 'Roboto', 'Montserrat', Tahoma, Geneva, Verdana, sans-serif;
      margin: 0;
      background: var(--gris-bg);
      color: var(--azul-oscuro);
    }
    .layout {
      display: flex;
      min-height: 100vh;
    }
    /* SIDEBAR - ESTILO ESPECÍFICO PARA LEAD.HTML */
    .sidebar {
      background: linear-gradient(180deg, #f7fafd 0%, #f4f7fb 100%);
      min-width: 240px;
      width: 240px;
      color: #333;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 24px 0;
      height: 100vh;
      position: fixed;
      left: 0;
      top: 0;
      z-index: 1000;
      box-shadow: 0 6px 24px 0 rgba(30,41,59,0.10);
    }
    
    .user-info {
      text-align: center;
      margin-bottom: 30px;
      width: 100%;
      padding: 0 20px;
    }
    
    .avatar {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background-color: #e2e8f0;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 15px;
      font-size: 2rem;
      color: #64748b;
    }
    
    .user-name {
      display: block;
      font-weight: 600;
      font-size: 1.1rem;
      margin-bottom: 5px;
      color: #1e293b;
    }
    
    .user-role {
      display: block;
      font-size: 0.9rem;
      color: #64748b;
    }
    
    .sidebar h3 {
      color: #22b3ec;
      font-size: 1.1rem;
      margin: 0 0 24px 0;
      padding: 0 20px;
      text-align: center;
      width: 100%;
    }
    
    .sidebar ul {
      list-style: none;
      padding: 0;
      width: 100%;
      margin: 0;
    }
    
    .sidebar li {
      width: 100%;
      margin: 5px 0;
    }
    
    .sidebar a {
      display: flex;
      align-items: center;
      padding: 12px 20px;
      color: #333;
      text-decoration: none;
      transition: all 0.2s ease;
      border-radius: 8px;
      margin: 0 10px;
    }
    
    .sidebar a i {
      margin-right: 10px;
      width: 20px;
      text-align: center;
      font-size: 1.1em;
    }
    
    .sidebar a:hover, .sidebar a.active {
      background: #22b3ec;
      color: white;
      transform: translateX(5px);
    }
    
    .sidebar a.active {
      font-weight: 600;
      background: #22b3ec;
      color: white;
    }
    .graph-canvas {
      width: 100% !important;
      height: calc(100% - 35px) !important; /* Restar espacio del título */
      min-height: 220px;
      max-height: 100%;
    }
    .graph-container {
      min-height: 350px;
      height: 100%;
      max-height: 650px;
      display: flex;
      flex-direction: column;
      background: white;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      padding: 20px;
      overflow: hidden;
      box-sizing: border-box;
      width: 100%;
      margin: 0 auto;
    }
    .graph-container h3 {
      font-size: 0.95em;
      margin: 0 0 15px 0;
      padding-bottom: 8px;
      color: var(--azul-oscuro);
      border-bottom: 1px solid var(--gris-borde);
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .sidebar-logo {
      width: 58px;
      height: 58px;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: none;
      box-shadow: none;
      border-radius: 0;
    }
    .sidebar-logo img {
      width: 48px;
      height: 48px;
      display: block;
    }
    .sidebar-title {
      color: var(--sidebar-accent);
      font-size: 1.15em;
      font-weight: 700;
      text-align: center;
      margin-bottom: 24px;
      letter-spacing: .5px;
    }
    /* Estilos del menú de navegación */
    
    /* Los estilos del menú de navegación ahora están en css/sidebar.css */
    .sidebar-nav button:hover {
      background: var(--sidebar-accent);
      color: var(--sidebar-text);
    }
    .sidebar-lema {
      color: var(--sidebar-accent);
      font-style: italic;
      font-size: 0.99em;
      opacity: 0.6;
      margin-top: auto;
      padding: 12px 10px 18px 10px;
      text-align: center;
      font-weight: 600;
    }

    /* MAIN CONTENT */
    .main-content {
      flex: 1;
      padding: 20px 30px 20px 30px;
      overflow-y: auto;
      display: flex;
      justify-content: flex-start;
      gap: 40px;
      width: calc(100% - 240px); /* Restar el ancho del sidebar */
      margin-left: 240px; /* Igual al ancho del sidebar */
      height: calc(100vh - 40px);
      box-sizing: border-box;
    }
    /* LEAD FORM */
    .lead-content-row {
      display: flex;
      flex-direction: row;
      gap: 40px;
      width: 100%;
      max-width: 1600px;
      margin: 0 auto;
      padding: 0 20px 20px 20px;
      align-items: flex-start;
      box-sizing: border-box;
    }
    .graphs-section {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 30px;
      min-width: 0;
      width: 100%;
      max-width: 100%;
      height: 100%;
      min-height: 100%;
      box-sizing: border-box;
      padding: 20px 10px;
      overflow-y: auto;
    }
    
    .graph-container {
      flex: 1;
      display: flex;
      flex-direction: column;
      background: white;
      border-radius: 12px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      padding: 20px;
      overflow: hidden;
      box-sizing: border-box;
      width: 100%;
      min-height: 0;  /* Permite que se encoja si es necesario */
    }
    .form-section {
      background: white;
      border-radius: 12px;
      padding: 30px 35px 90px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      width: 100%;
      max-width: 500px;
      margin: 0;
      border: 1px solid #e2e8f0;
      display: flex;
      flex-direction: column;
      height: calc(100vh - 100px);
      max-height: 900px;
    }
    
    .form-section h2 {
      color: var(--azul-oscuro);
      margin-bottom: 20px;
      font-size: 1.5rem;
      text-align: center;
    }
    
    .form-row {
      display: flex;
      flex-wrap: wrap;
      margin: 0 -10px 15px;
    }
    
    .form-group {
      flex: 1 1 50%;
      padding: 0 10px;
      margin-bottom: 15px;
      min-width: 200px;
    }
    
    /* Contenedor del formulario con scroll */
    #crmForm {
      display: flex;
      flex-direction: column;
      height: 100%;
      overflow: hidden; /* Ocultar el scroll por defecto */
    }
    
    /* Contenedor de los campos del formulario con scroll */
    .form-fields-container {
      flex: 1;
      overflow-y: auto;
      padding-right: 8px; /* Espacio para la barra de desplazamiento */
      margin-right: -8px; /* Compensar el padding para mantener el ancho */
    }
    
    /* Estilo para la barra de desplazamiento */
    .form-fields-container::-webkit-scrollbar {
      width: 8px;
    }
    
    .form-fields-container::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 4px;
    }
    
    .form-fields-container::-webkit-scrollbar-thumb {
      background: #c1c1c1;
      border-radius: 4px;
    }
    
    .form-fields-container::-webkit-scrollbar-thumb:hover {
      background: #a8a8a8;
    }
    
    /* Contenedor del botón fijo */
    .form-button-container {
      position: absolute;
      bottom: 25px;
      left: 35px;
      right: 35px;
      background: white;
      padding: 15px 0 5px;
      border-top: 1px solid #e2e8f0;
      text-align: center;
    }
    
    .btn-submit {
      background: #25a9dd;
      color: #fff;
      border-radius: 9px;
      border: none;
      font-weight: 700;
      font-size: 1.18em;
      padding: 12px 30px;
      cursor: pointer;
      transition: all 0.3s ease;
      width: 100%;
      max-width: 300px;
      margin: 0 auto;
      display: block;
    }
    
    .btn-submit:hover {
      background: #183153;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    
    .btn-submit:active {
      transform: translateY(0);
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    }
    
    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: 500;
      color: var(--azul-oscuro);
    }
    
    .form-control {
      width: 100%;
      padding: 8px 12px;
      border: 1px solid var(--gris-borde);
      border-radius: 4px;
      font-size: 0.9rem;
      transition: border-color 0.2s;
    }
    
    .form-control:focus {
      outline: none;
      border-color: var(--azul-acento);
      box-shadow: 0 0 0 2px rgba(34, 179, 236, 0.2);
    }
    
    .radio-group {
      display: flex;
      gap: 15px;
      margin-top: 5px;
    }
    
    .radio-label {
      display: flex;
      align-items: center;
      gap: 5px;
      cursor: pointer;
    }
    
    .radio-label input[type="radio"] {
      margin: 0;
    }
    
    textarea.form-control {
      min-height: 80px;
      resize: vertical;
    }
    
    @media (max-width: 600px) {
      .form-group {
        flex: 1 1 100%;
      }
    }
    .form-section h2 {
      font-weight: 700;
      font-size: 2em;
      color: #183153;
      margin-bottom: 28px;
      margin-top: 0;
    }
    .form-group { margin-bottom: 18px;}
    .form-section label {
      color: #25a9dd;
      font-weight: 700;
      margin-bottom: 7px;
      display: block;
    }
    .form-section label[for="fecha-lead"] {
      color: #183153;
    }
    .form-section input, .form-section select {
      background: #f8fcff;
      border-radius: 7px;
      border: 1.5px solid #e4e6f1;
      padding: 13px 15px;
      font-size: 1.12em;
      width: 100%;
      margin-top: 2px;
    }
    .form-section button[type="submit"] {
      background: #25a9dd;
      color: #fff;
      border-radius: 9px;
      border: none;
      font-weight: 700;
      font-size: 1.18em;
      padding: 16px 0;
      width: 100%;
      margin-top: 9px;
      transition: background 0.2s;
    }
    .form-section button[type="submit"]:hover {
      background: #183153;
    }
    .graph-container {
      min-height: 300px;
      height: 100%;
      max-height: 400px;
      display: flex;
      flex-direction: column;
      background: white;
      border-radius: var(--radius);
      box-shadow: var(--sombra);
      padding: 20px;
      overflow: hidden;
      box-sizing: border-box;
      width: 100%;
      margin-bottom: 20px;
    }
    
    .graph-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }
    
    .graph-header h3 {
      margin: 0;
      font-size: 1.2rem;
      color: var(--azul-oscuro);
    }
    
    .week-navigation {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .week-nav-button {
      background: #f8fafc;
      border: 1px solid #e2e8f0;
      border-radius: 6px;
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      color: #64748b;
      transition: all 0.2s ease;
    }
    
    .week-nav-button:hover:not(:disabled) {
      background: #f1f5f9;
      color: var(--azul-acento);
      border-color: #cbd5e1;
    }
    
    .week-nav-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    #semana-actual {
      font-size: 0.9rem;
      color: #64748b;
      min-width: 100px;
      text-align: center;
    }
    
    .graph-scroll-container {
      width: 100%;
      overflow-x: auto;
      overflow-y: hidden;
      -webkit-overflow-scrolling: touch;
      scrollbar-width: none; /* Firefox */
      margin-bottom: 10px;
    }
    
    .graph-scroll-container::-webkit-scrollbar {
      display: none; /* Chrome, Safari, Opera */
    }
    
    .graph-wrapper {
      min-width: 100%;
      width: max-content;
      height: 300px;
    }
    
    .graph-scroll-controls {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-top: 10px;
    }
    
    .scroll-button {
      background: #f0f4f8;
      border: 1px solid #d9e2ec;
      border-radius: 4px;
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      color: #486581;
      transition: all 0.2s ease;
    }
    
    .scroll-button:hover {
      background: #e0e7ff;
      color: #3b82f6;
    }
    
    .scroll-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    
    .scroll-track {
      flex: 1;
      height: 6px;
      background: #e9ecef;
      border-radius: 3px;
      position: relative;
      overflow: hidden;
    }
    
    .scroll-thumb {
      position: absolute;
      height: 100%;
      background: #3b82f6;
      border-radius: 3px;
      width: 100px;
      left: 0;
      top: 0;
    }
    
    @media (max-width: 1100px) {
      .lead-content-row { 
        flex-direction: column; 
        gap: 20px; 
        max-height: none;
      }
      .main-content { 
        padding: 15px; 
        height: auto;
      }
      .form-section {
        width: 100%;
        max-width: 100%;
        min-width: 0;
        position: static;
      }
    }
    @media (max-width: 700px) {
      .layout { flex-direction: column;}
      .sidebar { flex-direction: row; width: 100vw; min-height: 0; height: 70px; align-items: center; padding: 7px 0; }
      .sidebar-logo { margin: 0 12px 0 0; }
      .sidebar-title { font-size: 1em; margin-bottom: 0;}
      .sidebar-nav { flex-direction: row; gap: 0; }
      .sidebar-nav button { font-size: 1em; padding: 11px 6px; width: auto; border-radius: 7px; margin:0 3px; }
      .sidebar-lema { display: none;}
      .main-content { 
        padding: 12px 2px; 
        flex-direction: column;
      }
      .lead-content-row { 
        flex-direction: column; 
        gap: 12px;
        max-width: 100%;
      }
      .form-section, .graphs-section { 
        width: 100%;
        max-width: 100%;
        padding: 13px 7px;
      }
      .graphs-section {
        grid-template-columns: 1fr !important;
      }
    }
    /* Estilos para el filtro de fecha */
    .date-filter-container {
      width: 100%;
      margin-bottom: 20px;
      background: white;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    
    .date-filter {
      display: flex;
      align-items: center;
      gap: 15px;
      flex-wrap: wrap;
    }
    
    .date-filter label {
      color: #15344a;
      font-weight: 600;
      margin-right: 5px;
    }
    
    .date-select {
      padding: 8px 12px;
      border: 1px solid #d1d5db;
      border-radius: 4px;
      background-color: #f9fafb;
      font-size: 14px;
      min-width: 120px;
    }
    
    .filter-button {
      padding: 8px 16px;
      background-color: #15344a;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: 600;
      transition: background-color 0.2s;
    }
    
    .filter-button:hover {
      background-color: #1e4b6e;
    }
    
    #reset-filter {
      background-color: #6b7280;
    }
    
    #reset-filter:hover {
      background-color: #4b5563;
    }
  </style>
</head>
<body>
<div class="layout">
  <!-- SIDEBAR -->
  <nav class="sidebar">
    <!-- Información del Usuario -->
    <div class="user-info">
      <div class="avatar">
        <i class="fas fa-user-circle"></i>
      </div>
      <div class="user-details">
        <span id="user-name" class="user-name">Usuario</span>
        <span id="user-role" class="user-role">Rol</span>
      </div>
    </div>
    
    <h3>Menú</h3>
    <ul>
      <li><a href="inicio.html"><i class="fas fa-home"></i> <span>Inicio</span></a></li>
      <li><a href="lead.html" class="active"><i class="fas fa-user-plus"></i> <span>Nuevo Lead</span></a></li>
      <li><a href="Costumer.html"><i class="fas fa-users"></i> <span>Clientes</span></a></li>
      <li id="teamMenuItem"><a href="team.html"><i class="fas fa-users-cog"></i> <span>Team</span></a></li>
      <li>
        <a href="#" id="logoutBtn" style="color: #e74c3c;">
          <i class="fas fa-sign-out-alt"></i> <span>Cerrar sesión</span>
        </a>
      </li>
    </ul>
  </nav>
  <main class="main-content">
    <div class="lead-content-row">
      <!-- FORMULARIO -->
      <section class="form-section" id="form-panel">
        <h2>Formulario de Registro</h2>
        <form id="crmForm">
          <!-- Contenedor de campos con scroll -->
          <div class="form-fields-container">
            <!-- Nombre Cliente -->
            <div class="form-group">
            <label for="nombre-cliente">Nombre Cliente</label>
            <input type="text" id="nombre-cliente" class="form-control" required>
          </div>
          
          <!-- Teléfono Principal -->
          <div class="form-group">
            <label for="telefono-principal">Teléfono Principal</label>
            <input type="tel" id="telefono-principal" class="form-control" required>
          </div>
          
          <!-- Teléfono Alterno -->
          <div class="form-group">
            <label for="telefono-alterno">Teléfono Alterno</label>
            <input type="tel" id="telefono-alterno" class="form-control">
          </div>
          
          <!-- Número de cuenta -->
          <div class="form-group">
            <label for="numero-cuenta">Número de cuenta</label>
            <input type="text" id="numero-cuenta" class="form-control">
          </div>
          
          <!-- Dirección -->
          <div class="form-group">
            <label for="direccion">Dirección *</label>
            <input type="text" id="direccion" class="form-control" required>
          </div>
          
          <!-- Autopago -->
          <div class="form-group">
            <label for="autopago">Autopago</label>
            <select id="autopago" class="form-control" required>
              <option value="">Elige</option>
              <option value="si">SI</option>
              <option value="no">NO</option>
            </select>
          </div>
          
          <!-- Tipo de servicios -->
          <div class="form-group">
            <label for="tipo-servicio">Tipo de servicios</label>
            <select id="tipo-servicio" class="form-control" required>
              <option value="">Elige</option>
              <option value="video">VIDEO</option>
              <option value="internet">INTERNET</option>
              <option value="att-air">AT&T AIR</option>
              <option value="wireless">WIRELESS</option>
              <option value="single-internet">SINGLE INTERNET</option>
              <option value="frontier">FRONTIER</option>
              <option value="windstream">WINDSTREAM</option>
              <option value="optimum">OPTIMUM</option>
              <option value="wow">WOW</option>
              <option value="altafiber">ALTAFIBER</option>
              <option value="consolidate">CONSOLIDATE</option>
              <option value="hughesnet">HUGHESNET</option>
              <option value="viasat">VIASAT</option>
              <option value="centurylink">CENTURYLINK</option>
              <option value="metronet">METRONET</option>
              <option value="ziply-fiber">ZIPLY FIBER</option>
              <option value="hawaiian">HAWAIIAN</option>
              <option value="double-play">DOUBLE PLAY</option>
              <option value="vivint">VIVINT</option>
              <option value="brightspeed">BRIGHTSPEED</option>
              <option value="mobility">MOBILITY</option>
              <option value="sim-mobility">SIM MOBILITY</option>
              <option value="earthlink">EARTHLINK</option>
            </select>
          </div>
          
          <!-- Sistema -->
          <div class="form-group">
            <label for="sistema">Sistema</label>
            <select id="sistema" class="form-control" required>
              <option value="">Elige</option>
              <option value="sara">SARA</option>
              <option value="opus">OPUS</option>
              <option value="bo">B.O</option>
              <option value="na">N/A</option>
              <option value="chuzo">CHUZO</option>
            </select>
          </div>
          
          <!-- Riesgo -->
          <div class="form-group">
            <label for="riesgo">Riesgo</label>
            <select id="riesgo" class="form-control" required>
              <option value="">Elige</option>
              <option value="low">LOW</option>
              <option value="medium">MEDIUM</option>
              <option value="high">HIGH</option>
              <option value="na">N/A</option>
            </select>
          </div>
          
          <!-- Día de venta -->
          <div class="form-group">
            <label for="dia-venta">Día de venta</label>
            <input type="date" id="dia-venta" class="form-control" required>
          </div>
          
          <!-- Día de instalación -->
          <div class="form-group">
            <label for="dia-instalacion">Día de instalación</label>
            <input type="date" id="dia-instalacion" class="form-control">
          </div>
          
          <!-- Status -->
          <div class="form-group">
            <label>Status</label>
            <div class="radio-group">
              <label class="radio-label">
                <input type="radio" name="status" value="PENDING" required />
                <span>PENDING</span>
              </label>
              <label class="radio-label">
                <input type="radio" name="status" value="REPRO" />
                <span>REPRO</span>
              </label>
            </div>
          </div>
          
          <!-- Servicios -->
          <div class="form-group">
            <label for="servicios">Servicios</label>
            <select id="servicios" class="form-control" required>
              <option value="">Elige</option>
              <option value="internet">INTERNET</option>
              <option value="internet-1-gig">INTERNET 1 GIG</option>
              <option value="internet-2-gig">INTERNET 2 GIG</option>
              <option value="internet-5-gig">INTERNET 5 GIG</option>
              <option value="internet-8-gig">INTERNET 8 GIG</option>
              <option value="internet-10-gig">INTERNET 10 GIG</option>
              <option value="internet-25-gig">INTERNET 25 GIG</option>
              <option value="internet-50-gig">INTERNET 50 GIG</option>
              <option value="internet-500-megas">INTERNET 500 MEGAS</option>
              <option value="internet-300-megas">INTERNET 300 MEGAS</option>
              <option value="internet-200-megas">INTERNET 200 MEGAS</option>
              <option value="internet-100-megas">INTERNET 100 MEGAS</option>
              <option value="internet-50-megas">INTERNET 50 MEGAS</option>
              <option value="internet-25-megas">INTERNET 25 MEGAS</option>
              <option value="internet-15-megas">INTERNET 15 MEGAS</option>
              <option value="internet-10-megas">INTERNET 10 MEGAS</option>
              <option value="internet-5-megas">INTERNET 5 MEGAS</option>
              <option value="internet-3-megas">INTERNET 3 MEGAS</option>
              <option value="internet-1-mega">INTERNET 1 MEGA</option>
              <option value="internet-768-kbps">INTERNET 768 KBPS</option>
              <option value="internet-512-kbps">INTERNET 512 KBPS</option>
              <option value="internet-256-kbps">INTERNET 256 KBPS</option>
              <option value="internet-128-kbps">INTERNET 128 KBPS</option>
              <option value="internet-64-kbps">INTERNET 64 KBPS</option>
              <option value="internet-32-kbps">INTERNET 32 KBPS</option>
              <option value="internet-16-kbps">INTERNET 16 KBPS</option>
              <option value="internet-8-kbps">INTERNET 8 KBPS</option>
              <option value="internet-4-kbps">INTERNET 4 KBPS</option>
              <option value="internet-2-kbps">INTERNET 2 KBPS</option>
              <option value="internet-1-kbps">INTERNET 1 KBPS</option>
            </select>
          </div>
          
          <!-- Mercado -->
          <div class="form-group">
            <label for="mercado">Mercado</label>
            <select id="mercado" class="form-control" required>
              <option value="">Seleccione</option>
              <option value="residencial">ICON</option>
              <option value="empresarial">BAMO</option>
            </select>
          </div>
          
          <!-- Supervisor -->
          <div class="form-group">
            <label for="supervisor">Supervisor</label>
            <select id="supervisor" class="form-control" required>
              <option value="">Seleccione</option>
              <option value="supervisor1">TEAM IRANIA</option>
              <option value="supervisor2">TEAM PLEITEZ</option>
              <option value="supervisor2">TEAM MARISOL</option>
              <option value="supervisor2">TEAM ROBERTO</option>
              <option value="supervisor2">TEAM LINEAS(JONATHAN ) </option>
            </select>
          </div>
          
          <!-- Comentario -->
          <div class="form-group">
            <label for="comentario">Comentario *</label>
            <select id="comentario" class="form-control" required>
              <option value="">Elige</option>
              <option value="ADQUIRIR SERVICIOS">ADQUIRIR SERVICIOS</option>
              <option value="CANCELAR SERVICIO ANTERIOR">CANCELAR SERVICIO ANTERIOR</option>
              <option value="QUITAR FEE $99.00">QUITAR FEE $99.00</option>
              <option value="CREAR ORDEN DE INTERNET">CREAR ORDEN DE INTERNET</option>
            </select>
          </div>
          
          <!-- Motivo de la llamada -->
          <div class="form-group">
            <label>¿Por qué llamó el cliente? *</label>
            <div class="radio-group" style="display: flex; flex-direction: column; gap: 10px;">
              <label class="radio-label">
                <input type="radio" name="motivo-llamada" value="BILL ALTO" required />
                <span>BILL ALTO</span>
              </label>
              <label class="radio-label">
                <input type="radio" name="motivo-llamada" value="PROBLEMAS DE INTERNET" required />
                <span>PROBLEMAS DE INTERNET</span>
              </label>
              <label class="radio-label">
                <input type="radio" name="motivo-llamada" value="ADQUIRIR SERVICIOS" required />
                <span>ADQUIRIR SERVICIOS</span>
              </label>
              <label class="radio-label">
                <input type="radio" name="motivo-llamada" value="MUDANZA" required />
                <span>MUDANZA</span>
              </label>
              <label class="radio-label">
                <input type="radio" name="motivo-llamada" value="CANCELAR SERVICIOS" required />
                <span>CANCELAR SERVICIOS</span>
              </label>
              <label class="radio-label">
                <input type="radio" name="motivo-llamada" value="PAGAR BILL" required />
                <span>PAGAR BILL</span>
              </label>
              <label class="radio-label">
                <input type="radio" name="motivo-llamada" value="ATENCION AL CLIENTE" required />
                <span>ATENCION AL CLIENTE</span>
              </label>
            </div>
          </div>
          
          <!-- ZIP CODE -->
          <div class="form-group">
            <label for="zip-code">ZIP CODE</label>
            <input type="text" id="zip-code" class="form-control">
          </div>
          
          <!-- Puntaje -->
          <div class="form-group">
            <label for="puntaje">Puntaje</label>
            <select id="puntaje" class="form-control" required>
              <option value="">Seleccione un puntaje</option>
              <option value="0.25">0.25</option>
              <option value="0.35">0.35</option>
              <option value="1.00">1.00</option>
              <option value="1.25">1.25</option>
              <option value="1.50">1.50</option>
            </select>
          </div>
          
          <!-- Botón de guardar -->
          <div class="form-group" style="grid-column: 1 / -1; margin-top: 30px; text-align: center;">
            <button type="submit" class="btn-submit" style="background: #4a90e2; color: white; border: none; padding: 12px 50px; border-radius: 6px; font-size: 1.1em; cursor: pointer; box-shadow: 0 4px 15px rgba(0,0,0,0.15); transition: all 0.3s ease;">
              <i class="fas fa-save"></i> Guardar Lead
            </button>
          </div>
          
          </div> <!-- Cierre del form-fields-container -->
        </form>
      </section>

      <!-- SECCIÓN DE GRÁFICAS -->
      <section class="graphs-section">
        <!-- Filtro de Fecha -->
        <div class="date-filter-container">
          <div class="date-filter">
            <label for="month-select">Mes:</label>
            <select id="month-select" class="date-select">
              <option value="0">Enero</option>
              <option value="1">Febrero</option>
              <option value="2">Marzo</option>
              <option value="3">Abril</option>
              <option value="4">Mayo</option>
              <option value="5">Junio</option>
              <option value="6">Julio</option>
              <option value="7">Agosto</option>
              <option value="8">Septiembre</option>
              <option value="9">Octubre</option>
              <option value="10">Noviembre</option>
              <option value="11">Diciembre</option>
            </select>
            
            <label for="day-select">Día:</label>
            <select id="day-select" class="date-select">
              <!-- Los días se llenarán dinámicamente -->
            </select>
            
            <label for="year-select">Año:</label>
            <select id="year-select" class="date-select">
              <option value="2023">2023</option>
              <option value="2024">2024</option>
              <option value="2025" selected>2025</option>
              <option value="2026">2026</option>
            </select>
            
            <button id="apply-filter" class="filter-button">Aplicar Filtro</button>
            <button id="reset-filter" class="filter-button">Hoy</button>
          </div>
        </div>
        <!-- Gráfica de Ventas y Puntaje -->
        <div class="graph-container">
          <h3>Ventas y Puntaje</h3>
          <canvas id="ventasPuntajeChart" class="graph-canvas"></canvas>
        </div>
        

      </section>
    </div>
  </main>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  // Variables globales para las gráficas
  let ventasPuntajeChart = null;
  let ventasProductoChart = null;
  
  // Función para actualizar la gráfica de ventas y puntaje con datos de prueba
        // Configuración de la gráfica
      const config = {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [
            {
              label: 'Ventas',
              data: ventas,
                backgroundColor: 'rgba(54, 162, 235, 0.7)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1,
                yAxisID: 'y',
                order: 2,
                barThickness: 30
              },
              {
                label: 'Puntaje Total',
                data: puntajes,
                type: 'line',
                borderColor: 'rgba(255, 99, 132, 1)',
                backgroundColor: 'rgba(255, 99, 132, 0.1)',
                borderWidth: 2,
                pointBackgroundColor: 'rgba(255, 99, 132, 1)',
                pointBorderColor: '#fff',
                pointHoverBackgroundColor: '#fff',
                pointHoverBorderColor: 'rgba(255, 99, 132, 1)',
                yAxisID: 'y1',
                order: 1,
                tension: 0.3
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              title: {
                display: true,
                text: 'Ventas y Puntaje por Agente (Semana Actual)',
                font: {
                  size: 16,
                  weight: 'bold',
                  family: 'Arial, sans-serif'
                },
                padding: {
                  top: 10,
                  bottom: 20
                }
              },
              legend: {
                position: 'top',
                labels: {
                  font: {
                    size: 12
                  }
                }
              },
              tooltip: {
                mode: 'index',
                intersect: false,
                callbacks: {
                  label: function(context) {
                    let label = context.dataset.label || '';
                    if (label) {
                      label += ': ';
                    }
                    if (context.parsed.y !== null) {
                      if (context.dataset.label === 'Ventas') {
                        label += context.parsed.y + ' ventas';
                      } else {
                        label += context.parsed.y + ' pts';
                      }
                    }
                    return label;
                  },
                  footer: function(tooltipItems) {
                    // Mostrar el puntaje promedio en el tooltip
                    const dataIndex = tooltipItems[0].dataIndex;
                    const agente = agentesOrdenados[dataIndex];
                    if (agente && agente.puntajePromedio !== undefined) {
                      return `Puntaje promedio: ${agente.puntajePromedio.toFixed(2)} pts/venta`;
                    }
                    return '';
                  }
                }
              },
              legend: {
                position: 'top',
                labels: {
                  font: {
                    size: 12
                  }
                }
              }
            },
            scales: {
              x: {
                title: {
                  display: true,
                  text: 'Agentes',
                  font: {
                    weight: 'bold'
                  }
                },
                grid: {
                  display: false
                },
                ticks: {
                  maxRotation: 45,
                  minRotation: 45
                }
              },
              y: {
                type: 'linear',
                display: true,
                position: 'left',
                title: {
                  display: true,
                  text: 'N° de Ventas',
                  font: {
                    weight: 'bold'
                  }
                },
                grid: {
                  drawOnChartArea: false
                },
                beginAtZero: true
              },
              y1: {
                type: 'linear',
                display: true,
                position: 'right',
                title: {
                  display: true,
                  text: 'Puntaje Total',
                  font: {
                    weight: 'bold'
                  }
                },
                grid: {
                  drawOnChartArea: false
                },
                beginAtZero: true
              }
            },
            animation: {
              duration: 1000,
              easing: 'easeInOutQuart'
            },
            // Mejorar la interacción al pasar el ratón
            interaction: {
              mode: 'index',
              intersect: false
            }
          },
          scales: {
            x: {
              title: {
                display: true,
                text: 'Agentes',
                font: {
                  weight: 'bold'
                }
              },
              grid: {
                display: false
              },
              ticks: {
                maxRotation: 45,
                minRotation: 45
              }
            },
            y: {
              type: 'linear',
              display: true,
              position: 'right',
              title: {
                display: true,
                text: 'Puntaje Total',
                font: {
                  weight: 'bold'
                }
              },
              grid: {
                drawOnChartArea: false
              },
              beginAtZero: true
            }
          },
          animation: {
            duration: 1000,
            easing: 'easeInOutQuart'
          }
        };
        
        try {
          return new Chart(ctx, config);
        } catch (error) {
          console.error('Error al inicializar la gráfica de ventas y puntaje:', error);
          return null;
        }
      } catch (error) {
        console.error('Error en la configuración de la gráfica:', error);
        return null;
      }
    
  

  // Función unificada para generar datos de prueba
  function generarDatosPrueba() {
    try {
      const hoy = new Date();
      const labels = [];
      const ventas = [];
      const puntajes = [];
      
      // Generar datos realistas para los últimos 7 días
      for (let i = 6; i >= 0; i--) {
        const fecha = new Date(hoy);
        fecha.setDate(hoy.getDate() - i);
        const diaSemana = fecha.toLocaleDateString('es-ES', { weekday: 'short' });
        labels.push(diaSemana);
        
        // Generar datos aleatorios para ventas (entre 5 y 20)
        const ventaDiaria = Math.floor(Math.random() * 16) + 5;
        ventas.push(ventaDiaria);
        
        // Generar puntajes aleatorios (entre 6.5 y 10)
        const puntajeDiario = parseFloat((Math.random() * 3.5 + 6.5).toFixed(1));
        puntajes.push(puntajeDiario);
      }
      
      console.log('Datos de ejemplo generados:', { labels, ventas, puntajes });
      
      return {
        labels: labels,
        datasets: [
          {
            label: 'Ventas',
            data: ventas,
            backgroundColor: 'rgba(54, 162, 235, 0.5)',
            borderColor: 'rgba(54, 162, 235, 1)',
            borderWidth: 1,
            yAxisID: 'y'
          },
          {
            label: 'Puntaje Promedio',
            data: puntajes,
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            borderColor: 'rgba(255, 99, 132, 1)',
            borderWidth: 1,
            yAxisID: 'y1',
            type: 'line',
            tension: 0.3
          }
        ]
      };
    } catch (error) {
      console.error('Error en generarDatosPrueba:', error);
      return null;
    }
  }

  // Función para procesar los datos de leads y agruparlos por fecha
  function procesarDatosLeads(leads) {
    try {
      console.log('Procesando', leads.length, 'leads...');
      
      // Crear un objeto para agrupar por fecha
      const datosPorFecha = {};
      
      // Procesar cada lead
      leads.forEach(lead => {
        // Obtener la fecha del lead (usar fecha_creacion o creadoEn o la fecha actual)
        const fechaLead = lead.fecha_creacion || lead.creadoEn || new Date().toISOString();
        
        // Crear fecha en UTC para evitar problemas de zona horaria
        const fecha = new Date(fechaLead);
        // Ajustar a mediodía UTC para evitar problemas de cambio de día
        fecha.setUTCHours(12, 0, 0, 0);
        
        // Formatear la fecha como YYYY-MM-DD en UTC
        const fechaStr = fecha.toISOString().split('T')[0];
        
        // Inicializar el objeto para esta fecha si no existe
        if (!datosPorFecha[fechaStr]) {
          datosPorFecha[fechaStr] = {
            fecha: fechaStr,
            ventas: 0,
            puntaje: 0,
            count: 0,
            fechaObj: fecha // Guardar el objeto Date para ordenamiento
          };
        }
        
        // Sumar venta y puntaje (asumiendo que cada lead es una venta)
        datosPorFecha[fechaStr].ventas += 1;
        
        // Sumar el puntaje si está disponible
        if (lead.puntuacion !== undefined) {
          const puntuacion = parseFloat(lead.puntuacion) || 0;
          datosPorFecha[fechaStr].puntaje += puntuacion;
          datosPorFecha[fechaStr].count += 1;
        }
      });
      
      // Calcular el puntaje promedio por día
      const resultado = Object.values(datosPorFecha).map(dia => ({
        fecha: dia.fecha,
        ventas: dia.ventas,
        puntaje: dia.count > 0 ? dia.puntaje / dia.count : 0
      }));
      
      console.log('Datos procesados por fecha:', resultado);
      return resultado;
      
    } catch (error) {
      console.error('Error al procesar datos de leads:', error);
      return [];
    }

  // Función para mostrar mensajes de error
  function mostrarMensajeError(mensaje) {
    console.error(mensaje);
    // Mostrar mensaje en la interfaz si es necesario
    const contenedor = document.getElementById('error-message');
    if (contenedor) {
      contenedor.textContent = mensaje;
      contenedor.style.display = 'block';
      setTimeout(() => {
        contenedor.style.display = 'none';
      }, 5000);
    }
  } // Agregada la llave de cierre faltante

  // Datos de prueba para la gráfica
  const datosPruebaVentas = [
    { fecha: '2025-08-06', ventas: 5, puntaje: 25 },
    { fecha: '2025-08-07', ventas: 8, puntaje: 40 },
    { fecha: '2025-08-08', ventas: 12, puntaje: 60 },
    { fecha: '2025-08-09', ventas: 7, puntaje: 35 },
    { fecha: '2025-08-10', ventas: 15, puntaje: 75 },
    { fecha: '2025-08-11', ventas: 10, puntaje: 50 },
    { fecha: '2025-08-12', ventas: 18, puntaje: 90 }
  ];
    
    // Formatear la fecha como YYYY-MM-DD en UTC
    const fechaStr = fecha.toISOString().split('T')[0];
    
    // Inicializar el objeto para esta fecha si no existe
    if (!datosPorFecha[fechaStr]) {
      datosPorFecha[fechaStr] = {
        fecha: fechaStr,
        ventas: 0,
        puntaje: 0,
        count: 0,
        fechaObj: fecha // Guardar el objeto Date para ordenamiento
      };
    }
    
    try { 
      console.log('=== INICIANDO ACTUALIZACIÓN DE GRÁFICA DE VENTAS ===');
      
      // Obtener el token de autenticación
      const token = localStorage.getItem('token') || sessionStorage.getItem('token');
      
      if (!token) {
        console.error('No se encontró token de autenticación. Redirigiendo a login...');
        window.location.href = '/login.html';
        return;
      }
      
      // Obtener el nombre del agente del localStorage o del DOM
      const userData = JSON.parse(localStorage.getItem('user') || sessionStorage.getItem('user') || '{}');
      const nombreAgente = userData.name || 'Usuario';
      
      // Obtener la fecha actual y la fecha de hace 6 días (últimos 7 días incluyendo hoy)
      const hoy = new Date();
      const fechaInicio = new Date();
      fechaInicio.setDate(hoy.getDate() - 6);
      
      // Función para formatear fechas como YYYY-MM-DD
      const formatoFecha = (fecha) => {
        return `${fecha.getFullYear()}-${String(fecha.getMonth() + 1).padStart(2, '0')}-${String(fecha.getDate()).padStart(2, '0')}`;
      };
      
      // Construir la URL de la API con los parámetros de fecha y agente
      const url = `/api/customers?agente=${encodeURIComponent(nombreAgente)}&fechaInicio=${formatoFecha(fechaInicio)}&fechaFin=${formatoFecha(hoy)}`;
      console.log('Solicitando datos a:', url);
      
      // Realizar la petición a la API con el token de autenticación
      console.log('Realizando petición a:', url);
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Authorization': `Bearer ${token}`,
          'Cache-Control': 'no-cache'
        },
        credentials: 'same-origin'
      });
      
      // Verificar si la respuesta es exitosa
      if (!response.ok) {
        throw new Error(`Error HTTP: ${response.status}`);
      }
      
      // Obtener los datos de la respuesta
      const responseData = await response.json();
      console.log('Datos recibidos de la API:', responseData);
      
      // Extraer el array de clientes de la respuesta
      const costumers = responseData.leads || [];
      
      // Inicializar un objeto para almacenar las ventas por día
      const ventasPorDia = {};
      
      // Inicializar los últimos 7 días con ventas en 0
      for (let i = 0; i < 7; i++) {
        const fecha = new Date(hoy);
        fecha.setDate(hoy.getDate() - (6 - i)); // Últimos 7 días incluyendo hoy
        ventasPorDia[formatoFecha(fecha)] = { ventas: 0, puntaje: 0 };
      }
      
      console.log('Clientes a procesar:', costumers);
      
      // Procesar los datos de los clientes
      if (Array.isArray(costumers) && costumers.length > 0) {
        costumers.forEach(costumer => {
          console.log('Procesando cliente:', costumer);
          
          // Intentar obtener la fecha del cliente, priorizando el campo 'dia_venta'
          let fechaStr = '';
          const posiblesCamposFecha = ['dia_venta', 'fecha', 'fecha_creacion', 'createdAt', 'fechaCreacion'];
          
          // Buscar el primer campo de fecha válido
          for (const campo of posiblesCamposFecha) {
            if (costumer[campo]) {
              let fecha;
              
              // Si es el campo 'dia_venta', manejarlo como string YYYY-MM-DD
              if (campo === 'dia_venta' && typeof costumer[campo] === 'string') {
                // Intentar parsear la fecha en formato YYYY-MM-DD
                const [year, month, day] = costumer[campo].split('-').map(Number);
                if (year && month && day) {
                  fecha = new Date(Date.UTC(year, month - 1, day, 12, 0, 0));
                }
              } else {
                // Para otros campos, intentar convertir a fecha directamente
                fecha = new Date(costumer[campo]);
              }
              
              if (fecha && !isNaN(fecha.getTime())) {
                fechaStr = formatoFecha(fecha);
                console.log(`Fecha encontrada en campo '${campo}':`, fechaStr, 'Valor original:', costumer[campo]);
                break;
              }
            }
          }
          
          // Si no hay fecha válida, usar la fecha actual
          if (!fechaStr) {
            fechaStr = formatoFecha(new Date());
            console.log('Usando fecha actual:', fechaStr);
          }
          
          // Inicializar el día si no existe
          if (!ventasPorDia[fechaStr]) {
            ventasPorDia[fechaStr] = { ventas: 0, puntaje: 0 };
          }
          
          // Obtener el puntaje (puede estar en diferentes campos o ser un número)
          let puntaje = 0;
          if (typeof costumer.puntaje === 'number') {
            puntaje = costumer.puntaje;
          } else if (typeof costumer.puntaje === 'string') {
            puntaje = parseFloat(costumer.puntaje) || 0;
          } else if (costumer.score) {
            puntaje = parseFloat(costumer.score) || 0;
          }
          
          console.log(`Registrando venta para ${fechaStr}: 1 venta, ${puntaje} puntos`);
          
          // Contar la venta y sumar el puntaje
          ventasPorDia[fechaStr].ventas += 1;
          ventasPorDia[fechaStr].puntaje += puntaje;
        });
      } else {
        console.warn('La respuesta no es un array:', costumers);
        return false;
      }
      
      // Convertir el objeto a un array y ordenar por fecha
      const datos = Object.entries(ventasPorDia)
        .map(([fecha, datos]) => ({
          fecha,
          ventas: datos.ventas,
          puntaje: datos.puntaje
        }))
        .sort((a, b) => new Date(a.fecha) - new Date(b.fecha));
      
      console.log('Ventas por día procesadas:', ventasPorDia);
      
      // Si no hay datos válidos, mostrar mensaje
      if (datos.length === 0) {
        console.warn('No hay datos válidos para mostrar en la gráfica');
        mostrarMensajeError('No hay datos de ventas válidos para mostrar');
        return false;
      }
      
      console.log('Datos procesados para la gráfica:', datos);
      
      // Procesar los datos y actualizar la gráfica
      try {
        const resultado = await procesarDatosGrafica(datos);
        console.log('Gráfica de ventas y puntaje actualizada correctamente');
        return resultado;
      } catch (error) {
        console.error('Error al procesar datos para la gráfica:', error);
        mostrarMensajeError('Error al procesar los datos de la gráfica');
        return false;
      }
    } catch (error) {
      console.error('Error al procesar datos:', error);
      mostrarMensajeError('Error al procesar los datos');
      return false;
    }
  }

  // Función para procesar los datos de la gráfica
  async function procesarDatosGrafica(datos) {
    console.log('=== INICIANDO PROCESAMIENTO DE DATOS PARA GRÁFICA ===');

    // Validar datos
    if (!Array.isArray(datos) || datos.length === 0) {
      console.warn('No hay datos disponibles para mostrar en la gráfica');
      mostrarMensajeError('No hay datos de ventas para mostrar');
      return false;
    }

    console.log('Datos recibidos para procesar:', datos);

    // Inicializar la gráfica si no existe
    if (!ventasPuntajeChart) {
      console.log('Inicializando gráfica...');
      ventasPuntajeChart = inicializarGraficaVentasPuntaje();
      if (!ventasPuntajeChart) {
        throw new Error('No se pudo inicializar la gráfica de ventas');
      }
    }
    
    // Función para normalizar fechas
    const normalizarFecha = (fechaStr) => {
      if (!fechaStr) return null;
      
      try {
        // Si es un objeto Date, usarlo directamente
        if (fechaStr instanceof Date) {
          return new Date(Date.UTC(
            fechaStr.getFullYear(),
            fechaStr.getMonth(),
            fechaStr.getDate(),
            12,  // Hora fija a mediodía UTC
            0,
            0
          ));
        }
        
        // Si la fecha ya está en formato YYYY-MM-DD, convertirla a objeto Date en UTC
        if (/^\d{4}-\d{2}-\d{2}$/.test(fechaStr)) {
          const [year, month, day] = fechaStr.split('-').map(Number);
          return new Date(Date.UTC(year, month - 1, day, 12, 0, 0));
        }
        
        // Si es un timestamp o string de fecha ISO, convertir a objeto Date
        const fecha = new Date(fechaStr);
        if (isNaN(fecha.getTime())) return null;
        
        // Crear una nueva fecha en UTC usando los componentes de fecha local
        return new Date(Date.UTC(
          fecha.getUTCFullYear(),
          fecha.getUTCMonth(),
          fecha.getUTCDate(),
          12,  // Hora fija a mediodía UTC
          0,
          0
        ));
      } catch (error) {
        console.error('Error al normalizar fecha:', fechaStr, error);
        return null;
      }
    };
    
    // Ordenar datos por fecha
    const datosOrdenados = [...datos].sort((a, b) => {
      // Usar fechaObj si está disponible (de procesarDatosLeads) o normalizar la fecha
      const fechaA = a.fechaObj || normalizarFecha(a.fecha) || new Date(0);
      const fechaB = b.fechaObj || normalizarFecha(b.fecha) || new Date(0);
      return fechaA - fechaB;
    });
    
    console.log('Datos ordenados por fecha:', datosOrdenados);
    
    // Aquí iría el resto de la lógica de la función...
    // Por ahora, retornamos true para indicar que la función se ejecutó correctamente
    return true;
    
    console.error('Error en procesarDatosGrafica:', error);
    mostrarMensajeError('Error al procesar los datos de la gráfica: ' + error.message);
    return false;
  }
}

  // Función para actualizar la gráfica de ventas por producto con datos de prueba
  function actualizarGraficaVentasProducto() {
    console.log('Usando datos de prueba para la gráfica de productos...');
    
    // Datos de prueba para la gráfica de productos
    const datosPrueba = {
      labels: ['Internet', 'Televisión', 'Telefonía', 'Paquete Completo', 'Internet + TV'],
      datos: [35, 25, 20, 15, 5]
    };
    
    // Inicializar la gráfica si no existe
    if (!ventasProductoChart) {
      console.log('Inicializando gráfica de productos...');
      ventasProductoChart = inicializarGraficaVentasProducto();
      if (!ventasProductoChart) {
        console.error('No se pudo inicializar la gráfica de productos');
        return;
      }
    }

    // Actualizar los datos de la gráfica con los datos de prueba
    ventasProductoChart.data.labels = datosPrueba.labels;
    
    // Actualizar datos de ventas
    if (ventasProductoChart.data.datasets[0]) {
      ventasProductoChart.data.datasets[0].data = datosPrueba.datos;
      
      // Colores para la gráfica
      const backgroundColors = [
        'rgba(54, 162, 235, 0.7)',  // Azul
        'rgba(255, 99, 132, 0.7)',  // Rojo
        'rgba(75, 192, 192, 0.7)',  // Verde
        'rgba(255, 205, 86, 0.7)',  // Amarillo
        'rgba(153, 102, 255, 0.7)'  // Morado
      ];
      
      const borderColors = [
        'rgba(54, 162, 235, 1)',
        'rgba(255, 99, 132, 1)',
        'rgba(75, 192, 192, 1)',
        'rgba(255, 205, 86, 1)',
        'rgba(153, 102, 255, 1)'
      ];
      
      // Aplicar colores a los datos
      ventasProductoChart.data.datasets[0].backgroundColor = backgroundColors;
      ventasProductoChart.data.datasets[0].borderColor = borderColors;
    }
    
    // Actualizar la gráfica con animación
    ventasProductoChart.update({
      duration: 800,
      easing: 'easeOutQuart'
    });
  }
  

  // Función para obtener los nombres de los días de la semana
  function obtenerNombresDias(fechaInicio) {
    const dias = ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'];
    const fecha = new Date(fechaInicio);
    const resultado = [];
    
    for (let i = 0; i < 7; i++) {
      const fechaActual = new Date(fecha);
      fechaActual.setDate(fecha.getDate() + i);
      const nombreDia = dias[fechaActual.getDay()];
      const diaMes = fechaActual.getDate();
      const mes = fechaActual.getMonth() + 1;
      resultado.push(`${nombreDia} ${diaMes}/${mes}`);
    }
    
    return resultado;
  }

  // Función para actualizar las gráficas con datos de prueba
  async function actualizarGraficas(fecha = null) {
    console.log('Iniciando actualización de gráfica de ventas...');
    
    try {
      // Verificar si el elemento del gráfico existe
      const ventasPuntajeCanvas = document.getElementById('ventasPuntajeChart');
      
      if (!ventasPuntajeCanvas) {
        const errorMsg = 'No se encontró el elemento canvas para la gráfica de ventas y puntaje';
        console.error(errorMsg);
        mostrarMensajeError(errorMsg);
        return;
      }
      
      // Actualizar gráfica de ventas y puntaje
      try {
        console.log('Actualizando gráfica de ventas y puntaje...');
        await actualizarGraficaVentasPuntaje();
        console.log('Gráfica de ventas y puntaje actualizada exitosamente');
      } catch (error) {
        console.error('Error al actualizar gráfica de ventas y puntaje:', error);
        mostrarMensajeError('Error al actualizar gráfica de ventas y puntaje: ' + error.message);
      }
      
    } catch (error) {
      console.error('Error crítico al actualizar las gráficas:', error);
      mostrarMensajeError('Error crítico al actualizar las gráficas: ' + error.message);
    }

  // Función de logout
  function logout() {
    // Redirigir a inicio
    window.location.href = '/inicio.html';
  }

  // Función para obtener los días en un mes específico
  function getDaysInMonth(month, year) {
    // Nota: En JavaScript, los meses van de 0 a 11
    return new Date(year, month + 1, 0).getDate();
  }

  // Función para actualizar los días disponibles según el mes y año seleccionados
  function updateDaysDropdown() {
    const daySelect = document.getElementById('day-select');
    const monthSelect = document.getElementById('month-select');
    const yearSelect = document.getElementById('year-select');
    
    const selectedMonth = parseInt(monthSelect.value);
    const selectedYear = parseInt(yearSelect.value);
    const daysInMonth = getDaysInMonth(selectedMonth, selectedYear);
    
    // Guardar el día seleccionado actualmente
    const selectedDay = parseInt(daySelect.value) || 1;
    
    // Limpiar opciones actuales
    daySelect.innerHTML = '';
    
    // Agregar opciones de días
    for (let day = 1; day <= daysInMonth; day++) {
      const option = document.createElement('option');
      option.value = day;
      option.textContent = day;
      daySelect.appendChild(option);
    }
    
    // Establecer el día seleccionado (si es válido para el nuevo mes)
    if (selectedDay <= daysInMonth) {
      daySelect.value = selectedDay;
    } else {
      daySelect.value = daysInMonth; // Último día del mes si el día seleccionado es inválido
    }
  
  // Función para establecer la fecha actual en los selectores
  function setCurrentDate() {
    const now = new Date();
    document.getElementById('month-select').value = now.getMonth();
    document.getElementById('year-select').value = now.getFullYear();
    updateDaysDropdown();
    document.getElementById('day-select').value = now.getDate();
  }
  
  // Función para obtener la fecha seleccionada en formato YYYY-MM-DD
  function getSelectedDate() {
    const day = document.getElementById('day-select').value.padStart(2, '0');
    const month = (parseInt(document.getElementById('month-select').value) + 1).toString().padStart(2, '0');
    const year = document.getElementById('year-select').value;
    return `${year}-${month}-${day}`;
  }
  
  // Función para cargar datos con filtro de fecha
  async function cargarDatosConFiltro() {
    const fechaSeleccionada = getSelectedDate();
    try {
      // Aquí iría la llamada a tu API para obtener los datos filtrados por fecha
      // Por ahora, usamos la función actualizarGraficas existente
      // En una implementación real, deberías modificar actualizarGraficas para aceptar una fecha
      console.log('Cargando datos para la fecha:', fechaSeleccionada);
      await actualizarGraficas(fechaSeleccionada);
    } catch (error) {
      console.error('Error al cargar datos con filtro:', error);
    }

  // Función para actualizar la gráfica de ventas y puntaje con datos de prueba
  async function actualizarGraficaVentasPuntaje() {
    console.log('Usando datos de prueba para la gráfica...');
    
    try {
      // Datos de ejemplo para la gráfica (últimos 7 días)
      const hoy = new Date();
      const datos = [];
      
      // Generar datos para los últimos 7 días
      for (let i = 6; i >= 0; i--) {
        const fecha = new Date();
        fecha.setDate(hoy.getDate() - i);
        
        // Generar datos aleatorios para la demostración
        const ventas = Math.floor(Math.random() * 10) + 1; // 1-10 ventas
        const puntaje = Math.floor(ventas * (Math.random() * 2 + 3)); // Puntaje basado en ventas
        
        datos.push({
          fecha: fecha.toISOString().split('T')[0],
          ventas: ventas,
          puntaje: puntaje
        });
      }
      
      // Verificar que exista el canvas
      const canvas = document.getElementById('ventasPuntajeChart');
      if (!canvas) {
        console.error('No se encontró el elemento canvas para la gráfica');
        return;
      }
      
      // Asegurarse de que el contenedor tenga un tamaño adecuado
      const container = canvas.parentElement;
      container.style.width = '100%';
      container.style.height = '400px';
      
      // Inicializar la gráfica si no existe
      if (!ventasPuntajeChart) {
        console.log('Inicializando gráfica...');
        ventasPuntajeChart = inicializarGraficaVentasPuntaje();
        if (!ventasPuntajeChart) {
          throw new Error('No se pudo inicializar la gráfica de ventas');
        }
        console.log('Gráfica inicializada correctamente');
      }
      
      // Ordenar datos por fecha
      datos.sort((a, b) => new Date(a.fecha) - new Date(b.fecha));
      
      // Procesar datos para la gráfica
      const labels = [];
      const ventasData = [];
      const puntajeData = [];
      
      datos.forEach(item => {
        const fecha = new Date(item.fecha);
        labels.push(fecha.toLocaleDateString('es-ES', { weekday: 'short', day: 'numeric' }));
        ventasData.push(item.ventas || 0);
        puntajeData.push(item.puntaje || 0);
      });
      
      // Actualizar datos del gráfico
      ventasPuntajeChart.data.labels = labels;
      ventasPuntajeChart.data.datasets[0].data = ventasData;
      ventasPuntajeChart.data.datasets[1].data = puntajeData;
      
      // Configurar los totales para mostrar encima de las barras
      ventasPuntajeChart.options.plugins = {
        ...ventasPuntajeChart.options.plugins,
        datalabels: {
          display: true,
          anchor: 'end',
          align: 'top',
          formatter: function(value, context) {
            // Mostrar el valor exacto encima de cada barra
            return value !== 0 ? value : ''; // No mostrar ceros
          },
          font: {
            weight: 'bold',
            size: 10
          },
          color: function(context) {
            // Cambiar color del texto según el dataset
            return context.datasetIndex === 0 ? '#1e40af' : '#991b1b';
          }
        }
      };
      
      // Configurar el espaciado entre barras
      ventasPuntajeChart.options.scales.x = {
        ...ventasPuntajeChart.options.scales.x,
        grid: {
          display: false
        },
        ticks: {
          maxRotation: 45,
          minRotation: 45
        }
      };
      
      // Actualizar la gráfica
      ventasPuntajeChart.update();
      console.log('Gráfica actualizada correctamente con datos de prueba');
      
    } catch (error) {
      console.error('Error al actualizar la gráfica con datos de prueba:', error);
      mostrarMensajeError('Error al actualizar la gráfica: ' + error.message);
    }

  // Función para inicializar la gráfica de ventas y puntaje
  function inicializarGraficaVentasPuntaje() {
    try {
      // Verificar que el contenedor del gráfico exista
      const canvas = document.getElementById('ventasPuntajeChart');
      if (!canvas) {
        console.error('No se encontró el elemento canvas para la gráfica de ventas y puntaje');
        return null;
      }
      
      // Destruir la instancia anterior del gráfico si existe
      if (ventasPuntajeChart) {
        console.log('Destruyendo instancia anterior del gráfico...');
        ventasPuntajeChart.destroy();
        ventasPuntajeChart = null;
      }
      
      // Obtener el contexto 2D después de asegurarnos de que el canvas existe
      const ctx = canvas.getContext('2d');
      
      // Asegurarse de que el contenedor tenga un tamaño adecuado
      const container = canvas.parentElement;
      container.style.width = '100%';
      container.style.height = '400px';
      
      // Crear y retornar la instancia del gráfico
      return new Chart(ctx, {
        type: 'bar',
        data: {
          labels: [],
          datasets: [
            {
              label: 'Ventas',
              type: 'bar',
              backgroundColor: 'rgba(54, 162, 235, 0.5)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 1,
              yAxisID: 'y'
            },
            {
              label: 'Puntaje',
              type: 'line',
              borderColor: 'rgba(255, 99, 132, 1)',
              borderWidth: 2,
              fill: false,
              yAxisID: 'y1'
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              type: 'linear',
              display: true,
              position: 'left',
              title: {
                display: true,
                text: 'Ventas'
              }
            },
            y1: {
              type: 'linear',
              display: true,
              position: 'right',
              grid: {
                drawOnChartArea: false
              },
              title: {
                display: true,
                text: 'Puntaje'
              },
              min: 0,
              max: 100
            },
            x: {
              grid: {
                display: false
              }
            }
          },
          plugins: {
            legend: {
              position: 'top',
            },
            tooltip: {
              mode: 'index',
              intersect: false
            }
          }
        }
      });
    } catch (error) {
      console.error('Error al inicializar la gráfica de ventas y puntaje:', error);
      return null;
    }

  // Función para inicializar la gráfica de ventas por producto
  function inicializarGraficaVentasProducto() {
    try {
      const ctx = document.getElementById('ventasProductoChart');
      if (!ctx) {
        console.log('No se encontró el elemento canvas para la gráfica de ventas por producto');
        return null;
      }
      
      // Asegurarse de que el contenedor tenga un tamaño adecuado
      const container = ctx.parentElement;
      container.style.width = '100%';
      container.style.height = '400px';
      
      // Retornar null ya que no vamos a inicializar esta gráfica por ahora
      console.log('Gráfica de ventas por producto no inicializada (comentada)');
      return null;
    } catch (error) {
      console.error('Error al inicializar la gráfica de ventas por producto:', error);
      return null;
    }

  // La función initializeApp ha sido movida más abajo en el archivo

  // LÓGICA PRINCIPAL - Se ejecuta cuando el DOM está completamente cargado
  document.addEventListener("DOMContentLoaded", async function() {
    console.log('DOM cargado, inicializando...');
    
    try {
      // Inicializar la aplicación
      initializeApp();
      
    } catch (error) {
      console.error('Error durante la inicialización de la página:', error);
    }
    
    // --- INICIALIZACIÓN DE ELEMENTOS ---
    const selects = {};
    const selectIds = ["team", "agent", "producto", "cuenta", "puntaje"];
    
    // Inicializar solo los selects que existen en el DOM
    selectIds.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        selects[id] = element;
      } else {
        console.warn(`Elemento con ID '${id}' no encontrado en el DOM`);
      }
    });
    
    // Obtener referencias a los elementos del DOM
    const monthSelect = document.getElementById('month-select');
    const yearSelect = document.getElementById('year-select');
    const applyFilter = document.getElementById('apply-filter');
    const resetFilter = document.getElementById('reset-filter');

    // --- DATOS PARA LOS SELECTS ---
    const data = {
      teams: {
        "Team Irania": ["Irania", "Michael", "Giselle"],
        "Team Pleitez": ["Pleitez", "Kevin", "Nelson"],
        "Team Roberto": ["Roberto", "Santos", "Erick"],
        "Team Lineas": ["Dania", "Genesis", "Ofelia"],
        "Team Randal": ["Randal", "Josue", "Elian"],
        "Team Marisol": ["Marisol", "Isabella", "Naidelyn"],
      },
      productos: [], // Se llenará dinámicamente con fetch
      cuentas: ["Nueva", "Winback", "Agregado"]
    };
    
    // Hacer que los datos estén disponibles globalmente
    window.data = data;

    // Inicializar los selectores de fecha
    setCurrentDate();
    
    // Configurar event listeners para los filtros
    if (monthSelect) monthSelect.addEventListener('change', updateDaysDropdown);
    if (yearSelect) yearSelect.addEventListener('change', updateDaysDropdown);
    if (applyFilter) applyFilter.addEventListener('click', cargarDatosConFiltro);
    if (resetFilter) {
      resetFilter.addEventListener('click', () => {
        setCurrentDate();
        cargarDatosConFiltro();
      });
    }
    
    // --- LLENADO DE SELECTS DEL FORMULARIO ---
    async function llenarProductosDinamicamente() {
      try {
        // Usar la misma lista de productos que está definida en el backend
        const PRODUCTOS_FIJOS = [
          "ATT AIR",
          "FRONTIER 5 GIG",
          "INTERNET + TELEFONO + TV",
          "FRONTIER",
          "FRONTIER INTERNET SERVICIOS"
        ];
        
        // Actualizar el select de productos
        if (selects.producto) {
          selects.producto.innerHTML = '<option value="">Seleccione Producto</option>' + 
            PRODUCTOS_FIJOS.map(p => `<option value="${p}">${p}</option>`).join('');
          window.LISTA_PRODUCTOS = PRODUCTOS_FIJOS;
        }
      } catch (e) {
        console.error('Error al cargar productos:', e);
        if (selects.producto) {
          selects.producto.innerHTML = '<option value="">(Error cargando productos)</option>';
        }
        window.LISTA_PRODUCTOS = [];
      }
    }

    // Función para llenar los selects
    async function llenarSelects() {
      try {
        // Verificar que window.data existe
        if (!window.data) {
          console.warn('No se encontró el objeto window.data');
          return;
        }

        // Llenar select de equipos si existe
        if (selects.team) {
          // Limpiar el select
          selects.team.innerHTML = '<option value="">Seleccione Equipo</option>';
          
          // Verificar que data.teams existe y tiene datos
          if (window.data.teams && typeof window.data.teams === 'object') {
            // Llenar el select de equipos
            Object.keys(window.data.teams).forEach(team => {
              selects.team.add(new Option(team, team));
            });
            
            // Agregar event listener para el cambio de equipo
            selects.team.addEventListener("change", function () {
              if (this.value && window.data.teams[this.value] && selects.agent) {
                // Actualizar el select de agentes cuando cambia el equipo
                selects.agent.innerHTML = '<option value="">Seleccione Agente</option>';
                window.data.teams[this.value].forEach(agent => {
                  selects.agent.add(new Option(agent, agent));
                });
              }
            });
          } else {
            console.warn('No se encontraron datos de equipos');
          }
        }
        
        // Llenar select de cuentas si existe
        if (selects.cuenta) {
          // Limpiar el select
          selects.cuenta.innerHTML = '<option value="">Seleccione Cuenta</option>';
          
          // Verificar que data.cuentas existe y es un array
          if (Array.isArray(window.data.cuentas) && window.data.cuentas.length > 0) {
            // Llenar el select de cuentas
            window.data.cuentas.forEach(cuenta => {
              selects.cuenta.add(new Option(cuenta, cuenta));
            });
          } else {
            console.warn('No se encontraron datos de cuentas');
          }
        }
        
        // Inicializar el select de agentes si existe
        if (selects.agent) {
          selects.agent.innerHTML = '<option value="">Seleccione Agente</option>';
        }
      } catch (error) {
        console.error('Error al llenar los selects:', error);
      }
    }
    
    // Llenar los selects
    llenarSelects();
    
    // Llenar productos dinámicamente
    llenarProductosDinamicamente();

    // Establecer fecha actual en el campo de fecha
    const fechaLead = document.getElementById('fecha-lead');
    if (fechaLead) {
      fechaLead.value = new Date().toISOString().slice(0, 10);
    }
    
    // Inicializar las gráficas
    try {
      console.log('Inicializando gráficas...');
      
      // Asegurarse de que los contenedores de las gráficas estén visibles
      const graphContainers = document.querySelectorAll('.graph-container');
      graphContainers.forEach(container => {
        container.style.display = 'block';
      });
      
      // Inicializar gráficas
      inicializarGraficas();
      
      // Cargar datos iniciales después de un pequeño retraso para asegurar que el DOM esté listo
      setTimeout(() => {
        console.log('Cargando datos iniciales...');
        actualizarGraficas();
      }, 100);
    } catch (error) {
      console.error('Error al inicializar gráficas:', error);
    }
    
    // Actualizar gráficas cada 5 minutos (300000 ms)
    setInterval(actualizarGraficas, 300000);
    
    // --- LÓGICA DE FORMULARIO ---
    const crmForm = document.getElementById('crmForm');
    if (crmForm) {
      // Función para mostrar notificación
      function showNotification(message, type = 'success') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        document.body.appendChild(notification);
        
        // Desaparecer después de 5 segundos
        setTimeout(() => {
          notification.remove();
        }, 5000);
      }

      // Función auxiliar para obtener el valor de un campo con manejo de errores
      function getFieldValue(id, required = false) {
        const element = document.getElementById(id);
        if (!element && required) {
          throw new Error(`Campo requerido no encontrado: ${id}`);
        }
        return element ? element.value : '';
      }

      // Función para obtener el valor de un radio button
      function getRadioValue(name, required = false) {
        const selected = document.querySelector(`input[name="${name}"]:checked`);
        if (!selected && required) {
          throw new Error(`Debe seleccionar una opción en: ${name}`);
        }
        return selected ? selected.value : '';
      }

      // Función para manejar el envío del formulario
      async function handleFormSubmit(e) {
        e.preventDefault();
        console.log('=== INICIANDO ENVÍO DE FORMULARIO ===');
        
        // Obtener el botón de envío
        const submitButton = e.target.querySelector('button[type="submit"]');
        const originalButtonText = submitButton ? submitButton.innerHTML : 'Enviar';
        
        // Deshabilitar el botón y mostrar indicador de carga
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Enviando...';
        }
        
        try {
          console.log('=== VALIDANDO CAMPOS DEL FORMULARIO ===');
          
          // Validar campos requeridos
          const requiredFields = [
            { id: 'nombre-cliente', name: 'Nombre del Cliente' },
            { id: 'telefono-principal', name: 'Teléfono Principal' },
            { id: 'tipo-servicio', name: 'Tipo de Servicio' },
            { id: 'dia-venta', name: 'Día de Venta' },
            { id: 'sistema', name: 'Sistema' },
            { id: 'direccion', name: 'Dirección' },
            { id: 'motivo-llamada', name: 'Motivo de la Llamada' }
          ];
          
          // Validar campos requeridos
          const missingFields = [];
          for (const field of requiredFields) {
            const value = field.id === 'motivo-llamada' 
              ? getRadioValue('motivo-llamada')
              : getFieldValue(field.id);
              
            console.log(`Campo ${field.id}:`, value || 'Vacío');
            
            if (!value) {
              missingFields.push(field.name);
            }
          }
          
          if (missingFields.length > 0) {
            throw new Error(`Los siguientes campos son requeridos: ${missingFields.join(', ')}`);
          }
          
          const puntajeVal = getFieldValue('puntaje') || '0';
          
          // Obtener valores una sola vez para evitar múltiples llamadas al DOM
          const nombreCliente = getFieldValue('nombre-cliente');
          const telefonoPrincipal = getFieldValue('telefono-principal');
          const telefonoSecundario = getFieldValue('telefono-secundario');
          const email = getFieldValue('email');
          const diaVenta = getFieldValue('dia-venta');
          const fechaInstalacionElement = document.getElementById('dia-instalacion');
          console.log('Elemento del campo dia-instalacion:', fechaInstalacionElement);
          console.log('Valor del campo dia-instalacion (directo):', fechaInstalacionElement ? fechaInstalacionElement.value : 'No encontrado');
          
          const fechaInstalacion = getFieldValue('dia-instalacion');
          console.log('Valor del campo dia-instalacion (via getFieldValue):', fechaInstalacion);
          const tipoServicio = getFieldValue('tipo-servicio');
          const producto = getFieldValue('producto');
          // Obtener y validar el campo sistema
          const sistemaElement = document.getElementById('sistema');
          console.log('Elemento del campo sistema:', sistemaElement);
          console.log('Opciones del select sistema:', sistemaElement ? Array.from(sistemaElement.options).map(o => o.value) : 'No encontrado');
          console.log('Valor seleccionado en sistema:', sistemaElement ? sistemaElement.value : 'No encontrado');
          
          const sistema = getFieldValue('sistema');
          console.log('Valor del campo sistema (via getFieldValue):', sistema);
          
          const supervisor = getFieldValue('supervisor');
          const direccion = getFieldValue('direccion');
          const ciudad = getFieldValue('ciudad');
          const estado = getFieldValue('estado');
          const zipCode = getFieldValue('zip-code');
          const mercado = getFieldValue('mercado');
          const numeroCuenta = getFieldValue('numero-cuenta');
          const comentario = getFieldValue('comentario');
          const motivoLlamada = getRadioValue('motivo-llamada');
          const status = document.querySelector('input[name="status"]:checked')?.value || 'PENDING';
          
          // Validar y formatear el puntaje
          let puntajeFinal = 0;
          if (puntajeVal && puntajeVal !== "Sin Puntaje" && puntajeVal !== "Seleccione Puntaje") {
            puntajeFinal = parseFloat(puntajeVal) || 0;
          }
          
          // Datos para la colección crm_agente
          // Asegurarse de que los nombres de los campos coincidan exactamente con los esperados por el servidor
          const leadData = {
            // Información básica del cliente
            nombre_cliente: nombreCliente,
            telefono_principal: telefonoPrincipal,
            telefono_alterno: telefonoSecundario || '',
            telefono: telefonoPrincipal, // Mantener compatibilidad con campos antiguos
            email: email || '',
            
            // Información de la venta
            dia_venta: diaVenta || new Date().toISOString().split('T')[0],
            dia_instalacion: fechaInstalacion || '',
            // Mantener compatibilidad con campos antiguos
            fecha_instalacion: fechaInstalacion || '',
            tipo_servicio: tipoServicio || 'INTERNET',
            tipo_servicios: tipoServicio || 'INTERNET', // Mantener compatibilidad
            producto: producto || '',
            sistema: sistema || 'SARA',
            supervisor: supervisor || '',
            agente: 'Agente', // Se debe obtener del usuario autenticado
            
            // Dirección y ubicación
            direccion: direccion || '',
            ciudad: ciudad || '',
            estado: estado || '',
            zip_code: zipCode || '',
            
            // Detalles adicionales
            mercado: mercado || 'residencial',
            puntaje: puntajeFinal,
            numero_cuenta: numeroCuenta || '',
            
            // Estado y seguimiento
            status: status,
            comentario: comentario || '',
            motivo_llamada: motivoLlamada || '',
            
            // Metadatos
            creadoEn: new Date().toISOString(),
            actualizadoEn: new Date().toISOString(),
            
            // Campos adicionales para compatibilidad
            servicios: tipoServicio || 'INTERNET',
            riesgo: 'N/A', // Valor por defecto
            autopago: 'NO' // Valor por defecto
          };
          
          // Asegurar que los campos requeridos tengan valores por defecto
          if (!leadData.telefono_principal && leadData.telefono) {
            leadData.telefono_principal = leadData.telefono;
          }

          // Datos para la colección customers (solo los campos solicitados)
          const customerData = {
            // Información del cliente (campos requeridos)
            nombre_cliente: nombreCliente,
            telefono: telefonoPrincipal,
            direccion: direccion,
            tipo_servicio: tipoServicio || 'INTERNET',
            
            // Información de la venta
            dia_venta: diaVenta || new Date().toISOString().split('T')[0],
            team: supervisor || 'TEAM IRANIA',
            supervisor: supervisor || 'TEAM IRANIA',
            agente: 'Agente', // Debería obtenerse del usuario logueado
            dia_instalacion: fechaInstalacion || '',
            puntaje: puntajeFinal || 0,
            zip: zipCode || '',
            
            // Metadatos adicionales
            creadoEn: new Date().toISOString(),
            actualizadoEn: new Date().toISOString(),
            producto_contratado: tipoServicio || 'INTERNET',
            fecha_contratacion: diaVenta || new Date().toISOString().split('T')[0],
            equipo: supervisor || 'TEAM IRANIA',
            fecha_creacion: new Date().toISOString(),
            status: status === 'PENDING' ? 'pendiente' : 'activo',
            comentario: comentario || '',
            motivo_llamada: motivoLlamada || '',
            numero_cuenta: numeroCuenta || ''
          };
          
          console.log('Datos del formulario validados correctamente');
          console.log('Datos a enviar:', customerData);
          
          // Continuar con el envío...
          const headers = { 
            "Content-Type": "application/json"
          };

          try {
            console.log('Enviando datos a las bases de datos...');
            
            // Usar la URL base actual (para soportar tanto desarrollo como producción)
            const baseUrl = window.location.origin;
            // Función auxiliar para hacer peticiones con manejo de errores
            const makeRequest = async (endpoint, data) => {
              try {
                const token = localStorage.getItem('token') || sessionStorage.getItem('token');
                const headers = { 
                  "Content-Type": "application/json"
                };
                
                if (token) {
                  headers['Authorization'] = `Bearer ${token}`;
                }
                
                const response = await fetch(`${baseUrl}${endpoint}`, { 
                  method: "POST", 
                  headers: headers,
                  body: JSON.stringify(data)
                });
                
                const responseData = await response.json().catch(() => ({}));
                
                // Considerar exitosas las respuestas 200 y 201
                if (response.ok || response.status === 200 || response.status === 201) {
                  return responseData;
                }
                
                // Para cualquier otro código de error, lanzar un error
                throw new Error(responseData.message || `Error en la petición: ${response.status}`);
              } catch (error) {
                console.error(`Error en makeRequest (${endpoint}):`, error);
                throw error; // Relanzar el error para manejarlo en el catch externo
              }
            };
            
// Depuración: Mostrar datos que se enviarán
console.log('=== DATOS A ENVIAR ===');
console.log('Lead Data:', JSON.stringify(leadData, null, 2));
console.log('Customer Data:', JSON.stringify(customerData, null, 2));

// Solo enviar a una base de datos (customers)
console.log('Enviando datos al endpoint de customers...');

// Asegurarse de que los datos tengan el formato correcto
const customerDataToSend = { ...customerData };

// Asegurar que el teléfono esté en el formato correcto
if (customerDataToSend.telefono && !customerDataToSend.telefono_principal) {
  customerDataToSend.telefono_principal = customerDataToSend.telefono;
}

// Solo enviar una petición a /api/customers
const customerResponse = await makeRequest("/api/customers", customerDataToSend);
const leadResponse = { success: true }; // Respuesta simulada para mantener compatibilidad

console.log('=== RESPUESTAS DEL SERVIDOR ===');
console.log('Lead Response:', leadResponse);
console.log('Customer Response:', customerResponse);

// Verificar que la respuesta sea exitosa
if (customerResponse && customerResponse.success) {
  showNotification("Datos guardados exitosamente", 'success');
  crmForm.reset();
  
  // Forzar una actualización de la gráfica con los datos más recientes
  try {
    console.log('Actualizando gráficas después de enviar lead...');
    await actualizarGraficas();
    console.log('Gráficas actualizadas exitosamente');
  } catch (error) {
    console.error('Error al actualizar las gráficas:', error);
  }
  
  // Opcional: Redirigir o actualizar la tabla de clientes
  if (window.location.pathname.includes('Costumer.html')) {
    try {
      const leads = await fetchLeadsAgente();
      if (window.renderCostumerTable) {
        renderCostumerTable(leads);
      }
      if (window.updateSummaryCards) {
        updateSummaryCards(leads);
      }
    } catch (error) {
      console.error('Error al actualizar la tabla de clientes:', error);
    }
  }
} else {
  throw new Error('Error al guardar los datos del cliente');
}
          } catch (error) {
            console.error('Error al enviar los datos:', error);
            showNotification(`Error: ${error.message}`, 'error');
          } finally {
            // Restaurar el botón en cualquier caso
            if (submitButton) {
              submitButton.disabled = false;
              submitButton.innerHTML = originalButtonText;
            }
          }
        } catch (error) {
          console.error('Error inesperado:', error);
          showNotification('Ocurrió un error inesperado', 'error');
          if (submitButton) {
            submitButton.disabled = false;
            submitButton.innerHTML = originalButtonText;
          }
        }
      }

      // Agregar el manejador de eventos al formulario
      function initializeForm() {
        const crmForm = document.getElementById('crmForm');
        if (crmForm) {
          crmForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            try {
              await handleFormSubmit(e);
            } catch (error) {
              console.error('Error inesperado en el manejador del formulario:', error);
              showNotification('Ocurrió un error inesperado al procesar el formulario', 'error');
              const submitButton = e.target.querySelector('button[type="submit"]');
              if (submitButton) {
                submitButton.disabled = false;
                submitButton.innerHTML = 'Enviar';
              }
            }
          });
        }
      }
      
      // Inicializar el formulario cuando el DOM esté listo
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeForm);
      } else {
        initializeForm();
      }
    }
    
    // Función para inicializar estilos de notificaciones
    function initializeNotificationStyles() {
      const style = document.createElement('style');
      style.textContent = `
    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 20px;
      border-radius: 4px;
      color: white;
      font-weight: 500;
      z-index: 1000;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      animation: slideIn 0.3s ease-out;
    }
    
    .success {
      background-color: #4CAF50;
    }
    
    .error {
      background-color: #F44336;
    }
    
    .warning {
      background-color: #FF9800;
    }
    
    .info {
      background-color: #2196F3;
    }
    
    @keyframes slideIn {
      from {
        transform: translateX(100%);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }
  `;
  document.head.appendChild(style);
  
  // Iniciar la aplicación
function initializeApp() {
    console.log('Inicializando aplicación...');
    
    // Inicializar datepickers u otros componentes si es necesario
    const fechaLead = document.getElementById('fecha-lead');
    if (fechaLead) {
        fechaLead.value = new Date().toISOString().slice(0, 10);
    }
    
    // Inicializar las gráficas
    try {
        console.log('Inicializando gráficas...');
        
        // Asegurarse de que los contenedores de las gráficas estén visibles
        const graphContainers = document.querySelectorAll('.graph-container');
        graphContainers.forEach(container => {
            container.style.display = 'block';
            container.style.width = '100%';
            container.style.height = '400px';
        });
        
        // Inicializar la gráfica
        const chartCanvas = document.getElementById('ventasPuntajeChart');
        if (chartCanvas) {
            console.log('Inicializando gráfica de ventas y puntaje...');
            chartCanvas.style.width = '100%';
            chartCanvas.style.height = '400px';
            
            // Inicializar la gráfica
            ventasPuntajeChart = inicializarGraficaVentasPuntaje();
            
            if (ventasPuntajeChart) {
                console.log('Gráfica inicializada correctamente');
                
                // Cargar datos iniciales
                console.log('Cargando datos iniciales...');
                actualizarGraficaVentasPuntaje().catch(error => {
                    console.error('Error al actualizar la gráfica:', error);
                    console.log('Usando datos de prueba...');
                    actualizarGraficaVentasPuntaje(datosPrueba);
                });
            } else {
                console.error('No se pudo inicializar la gráfica');
            }
        } else {
            console.error('No se encontró el elemento canvas para la gráfica');
        }
    } catch (error) {
        console.error('Error al inicializar gráficas:', error);
        // Intentar con datos de prueba en caso de error
        if (document.getElementById('ventasPuntajeChart')) {
            actualizarGraficaVentasPuntaje(datosPrueba);
        }
    }
    
    // Actualizar gráficas cada 5 minutos (300000 ms)
    setInterval(() => {
        console.log('Actualizando gráficas...');
        if (typeof actualizarGraficaVentasPuntaje === 'function') {
            actualizarGraficaVentasPuntaje().catch(error => {
                console.error('Error al actualizar la gráfica:', error);
            });
        }
    }, 300000);
}

// Iniciar la aplicación cuando el DOM esté listo
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    initializeApp();
}
</script>

<!-- Script de cierre de sesión unificado -->
<script src="js/auth-logout.js"></script>
</body>
</html>


